name: Build and Release

on:
  push:
    branches:
      - master

jobs:

  # Build on Linux with GCC
  build-linux:
    name: Build Linux (GCC)
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y g++ cmake build-essential zip

      - name: Configure and build
        run: |
          mkdir build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          cmake --build . --config Release

      - name: Install files
        run: |
          cd build
          cmake --install . --prefix ./install

      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-artifact
          path: |
            build/install/
            rf60Xsdk/include/

  # Build on Windows with MinGW
  build-windows-mingw:
    name: Build Windows (MinGW)
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4

      - uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-make
            zip

      - name: Configure and build
        shell: msys2 {0}
        run: |
          mkdir build && cd build
          cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release
          mingw32-make

      - name: Install files
        shell: msys2 {0}
        run: |
          cd build
          cmake --install . --prefix ./install

      - name: Upload Windows MinGW artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-mingw-artifact
          path: |
            build/install/
            rf60Xsdk/include/

  # Build on Windows with MSVC
  build-windows-msvc:
    name: Build Windows (MSVC)
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4

      - uses: ilammy/msvc-dev-cmd@v1

      - name: Configure and build
        run: |
          mkdir build && cd build
          cmake .. -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=Release
          cmake --build . --config Release

      - name: Install files
        run: |
          cd build
          cmake --install . --prefix ./install --config Release

      - name: Upload Windows MSVC artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-msvc-artifact
          path: |
            build/install/
            rf60Xsdk/include/

  # Create a tag and GitHub release, upload artifacts
  release:
    name: Create Tag & GitHub Release
    runs-on: ubuntu-latest
    needs:
      - build-linux
      - build-windows-mingw
      - build-windows-msvc

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Generate a unique tag (e.g., v2025.02.28.235959)
      - name: Create and push tag
        id: create_tag
        run: |
          TAG_NAME=v$(date +'%Y.%m.%d.%H%M%S')
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag $TAG_NAME
          git push origin $TAG_NAME
          echo "tag=$TAG_NAME" >> $GITHUB_OUTPUT

      # Download artifacts from previous builds
      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: linux-artifact
          path: artifacts/linux/

      - name: Download Windows MinGW artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-mingw-artifact
          path: artifacts/windows-mingw/

      - name: Download Windows MSVC artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-msvc-artifact
          path: artifacts/windows-msvc/

      # Archive the downloaded artifacts
      - name: Zip all artifacts
        run: |
          cd artifacts
          zip -r ../linux-build.zip linux/
          zip -r ../windows-mingw-build.zip windows-mingw/
          zip -r ../windows-msvc-build.zip windows-msvc/

      # Create a release and publish the built artifacts
      - name: Publish GitHub Release with artifacts
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.create_tag.outputs.tag }}
          name: Release ${{ steps.create_tag.outputs.tag }}
          generate_release_notes: true
          files: |
            linux-build.zip
            windows-mingw-build.zip
            windows-msvc-build.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}